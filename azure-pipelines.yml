# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

stages:
  - stage: Build
    displayName: Build Source Code
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: Compile
        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'Sonar Cloud (FastTuple)'
              organization: 'nickrobison-github'
              scannerMode: 'Other'
          - task: Gradle@2
            inputs:
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              tasks: 'testClasses'
              sonarQubeRunAnalysis: true
              sqGradlePluginVersionChoice: 'build'
              jdkArchitectureOption: 'x64'
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'
          - task: CopyFiles@2
            inputs:
              contents: "fasttuple-*/**"
              targetFolder: $(Build.ArtifactStagingDirectory)
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: artifacts
  - stage: Test
    displayName: Run Cross-Platform Tests
    pool:
      vmImage: $(imageName)
    jobs:
      - job: Test
        strategy:
          matrix:
            Linux_Java8:
              imageName: 'ubuntu-latest'
              jdk: '1.8'
            Linux_Java11:
              imageName: 'ubuntu-latest'
              jdk: '1.11'
            Mac_Java8:
              jdk: '1.8'
              imageName: 'macos-10.14'
            Mac_Java11:
              jdk: '1.11'
              imageName: 'macos-10.14'
            Windows_Java8:
              imageName: 'vs2017-win2016'
              jdk: '1.8'
            Windows_Java11:
              imageName: 'vs2017-win2016'
              jdk: '1.11'
        steps:
          - download: current
            artifact: artifacts
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Pipeline.Workspace)/artifacts
              targetFolder: $(Build.SourcesDirectory)
          - task: Gradle@2
            inputs:
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '$(jdk)'
              tasks: 'build'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/test-results/test/binary/TEST-*.xml'
#          - task: Maven@3
#            inputs:
#              mavenPomFile: 'pom.xml'
#              mavenOptions: '-Xmx3072m'
#              javaHomeOption: 'JDKVersion'
#              jdkVersionOption: '$(jdk)'
#              jdkArchitectureOption: 'x64'
#              publishJUnitResults: true
#              testResultsFiles: '**/surefire-reports/TEST-*.xml'
#              goals: 'test'
  - stage: Deploy
    displayName: Deploy to Maven
    dependsOn: Test
    pool:
      vmImage: "ubuntu-latest"
#    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Deploy
        steps:
          - download: current
            artifact: artifacts
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Pipeline.Workspace)/artifacts
              targetFolder: $(Build.SourcesDirectory)
          - task: MavenAuthenticate@0
            inputs:
              mavenServiceConnections: 'jCenter maven'
          - task: Gradle@2
            inputs:
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '$(jdk)'
              tasks: 'publish'
              jdkArchitectureOption: 'x64'
#          - task: Maven@3
#            inputs:
#              mavenPomFile: 'pom.xml'
#              mavenOptions: '-Xmx3072m'
#              javaHomeOption: 'JDKVersion'
#              jdkVersionOption: '1.8'
#              jdkArchitectureOption: 'x64'
#              mavenAuthenticateFeed: true
#              goals: 'deploy'



